networks:
  default:
    name: ${COMPOSE_PROJECT_NAME}

volumes:
  1ak-group-hack-zookeeper:
  1ak-group-hack-kafka:
  1ak-group-hack-minio:
  1ak-group-hack-postgres:
  1ak-group-hack-redis:

services:
  redis:
    image: 'redis:${REDIS_VERSION}'
    container_name: ${REDIS_CONTAINER}
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - 1ak-group-hack-redis:/data

  postgres:
    image: 'postgres:${POSTGRES_VERSION}'
    container_name: ${POSTGRES_CONTAINER}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - 1ak-group-hack-postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_USER_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}

  minio:
    image: 'minio/minio:${MINIO_VERSION}'
    container_name: ${MINIO_CONTAINER}
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - 1ak-group-hack-minio:/data
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_WEB_CONSOLE_PORT}:9001"

  minio-init:
    image: 'minio/mc:${MINIO_MC_VERSION}'
    container_name: ${COMPOSE_PROJECT_NAME}-minio-init
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        echo 'Waiting for MinIO to be ready...';
        until mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}; do
          echo 'MinIO is not ready yet. Retrying in 2s...';
          sleep 2;
        done;
        echo 'MinIO is ready. Creating bucket if needed...';
        mc mb myminio/${MINIO_BUCKET} || echo 'Bucket already exists';
      "